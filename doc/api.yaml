openapi: "3.0.0"
paths:
  /user:
    post:
      operationId: "UserController_create"
      summary: "Create User"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - "Users"
    get:
      operationId: "UserController_findAll"
      summary: "Get all users"
      parameters: []
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
      tags:
        - "Users"
  /user/{id}:
    get:
      operationId: "UserController_findOne"
      summary: "Get user by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - "Users"
    put:
      operationId: "UserController_update"
      summary: "Update user by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - "Users"
    delete:
      operationId: "UserController_delete"
      summary: "Delete user by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "Users"
  /track:
    post:
      operationId: "TrackController_create"
      summary: "Create Track"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
      tags:
        - "Tracks"
    get:
      operationId: "TrackController_findAll"
      summary: "Get all Tracks"
      parameters: []
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Track"
      tags:
        - "Tracks"
  /track/{id}:
    get:
      operationId: "TrackController_findOne"
      summary: "Get Track by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
      tags:
        - "Tracks"
    put:
      operationId: "TrackController_update"
      summary: "Update Track by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrackDto"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
      tags:
        - "Tracks"
    delete:
      operationId: "TrackController_delete"
      summary: "Delete Track by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "Tracks"
  /artist:
    post:
      operationId: "ArtistController_create"
      summary: "Create Artist"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
      tags:
        - "Artists"
    get:
      operationId: "ArtistController_findAll"
      summary: "Get all Artists"
      parameters: []
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Artist"
      tags:
        - "Artists"
  /artist/{id}:
    get:
      operationId: "ArtistController_findOne"
      summary: "Get Artist by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
      tags:
        - "Artists"
    put:
      operationId: "ArtistController_update"
      summary: "Update Artist by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateArtistDto"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
      tags:
        - "Artists"
    delete:
      operationId: "ArtistController_delete"
      summary: "Delete Artist by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "Artists"
  /album:
    post:
      operationId: "AlbumController_create"
      summary: "Create Album"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
      tags:
        - "Albums"
    get:
      operationId: "AlbumController_findAll"
      summary: "Get all Albums"
      parameters: []
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Album"
      tags:
        - "Albums"
  /album/{id}:
    get:
      operationId: "AlbumController_findOne"
      summary: "Get Album by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
      tags:
        - "Albums"
    put:
      operationId: "AlbumController_update"
      summary: "Update Album by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDto"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
      tags:
        - "Albums"
    delete:
      operationId: "AlbumController_delete"
      summary: "Delete Album by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "Albums"
  /favs:
    get:
      operationId: "FavoritesController_findAll"
      summary: "Get all Favorites"
      parameters: []
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FavoritesResponse"
      tags:
        - "Favorites"
  /favs/track/{id}:
    post:
      operationId: "FavoritesController_addTrack"
      summary: "Add track to the favorites"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
      tags:
        - "Favorites"
    delete:
      operationId: "FavoritesController_delTrack"
      summary: "Delete track from favorites"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "Favorites"
  /favs/album/{id}:
    post:
      operationId: "FavoritesController_addAlbum"
      summary: "Add album to the favorites"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
      tags:
        - "Favorites"
    delete:
      operationId: "FavoritesController_delAlbum"
      summary: "Delete album from favorites"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "Favorites"
  /favs/artist/{id}:
    post:
      operationId: "FavoritesController_addArtist"
      summary: "Add artist to the favorites"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        201:
          description: ""
          content:
            application/json:
              schema:
                type: "string"
      tags:
        - "Favorites"
    delete:
      operationId: "FavoritesController_delArtist"
      summary: "Delete artist from favorites"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "Favorites"
info:
  title: "Home Library Service"
  description: "Home music library service"
  version: "1.0.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: "object"
      properties:
        login:
          type: "string"
        password:
          type: "string"
      required:
        - "login"
        - "password"
    User:
      type: "object"
      properties:
        id:
          type: "string"
          example: "ffcbc50b-80d8-43d0-aed4-4de49f883775"
          description: "User id: uuid v4"
        login:
          type: "string"
          example: "user@gmail.com"
          description: "User login"
        password:
          type: "string"
          example: "12345678"
          description: "Password"
        version:
          type: "number"
          example: "1"
          description: "Integer number, increments on update"
        createdAt:
          type: "number"
          example: "1675425790832"
          description: "timestamp of creation"
        updatedAt:
          type: "number"
          example: "1675425790832"
          description: "timestamp of last update"
      required:
        - "id"
        - "login"
        - "password"
        - "version"
        - "createdAt"
        - "updatedAt"
    UpdatePasswordDto:
      type: "object"
      properties:
        oldPassword:
          type: "string"
        newPassword:
          type: "string"
      required:
        - "oldPassword"
        - "newPassword"
    CreateTrackDto:
      type: "object"
      properties:
        name:
          type: "string"
        artistId:
          type: "string"
          nullable: true
        albumId:
          type: "string"
          nullable: true
        duration:
          type: "number"
      required:
        - "name"
        - "artistId"
        - "albumId"
        - "duration"
    Track:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        artistId:
          type: "string"
          nullable: true
        albumId:
          type: "string"
          nullable: true
        duration:
          type: "number"
      required:
        - "id"
        - "name"
        - "artistId"
        - "albumId"
        - "duration"
    UpdateTrackDto:
      type: "object"
      properties:
        name:
          type: "string"
        artistId:
          type: "string"
          nullable: true
        albumId:
          type: "string"
          nullable: true
        duration:
          type: "number"
      required:
        - "name"
        - "artistId"
        - "albumId"
        - "duration"
    CreateArtistDto:
      type: "object"
      properties:
        name:
          type: "string"
        grammy:
          type: "boolean"
      required:
        - "name"
        - "grammy"
    Artist:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        grammy:
          type: "boolean"
      required:
        - "id"
        - "name"
        - "grammy"
    UpdateArtistDto:
      type: "object"
      properties:
        name:
          type: "string"
        grammy:
          type: "boolean"
      required:
        - "name"
        - "grammy"
    CreateAlbumDto:
      type: "object"
      properties:
        name:
          type: "string"
        year:
          type: "number"
        artistId:
          type: "string"
      required:
        - "name"
        - "year"
        - "artistId"
    Album:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        year:
          type: "number"
        artistId:
          type: "string"
          nullable: true
      required:
        - "id"
        - "name"
        - "year"
        - "artistId"
    UpdateAlbumDto:
      type: "object"
      properties:
        name:
          type: "string"
        year:
          type: "number"
        artistId:
          type: "string"
          nullable: true
      required:
        - "name"
        - "year"
        - "artistId"
    FavoritesResponse:
      type: "object"
      properties:
        artists:
          type: "array"
          items:
            $ref: "#/components/schemas/Artist"
        albums:
          type: "array"
          items:
            $ref: "#/components/schemas/Album"
        tracks:
          type: "array"
          items:
            $ref: "#/components/schemas/Track"
      required:
        - "artists"
        - "albums"
        - "tracks"
