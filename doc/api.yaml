openapi: "3.0.0"
paths:
  /user:
    post:
      operationId: "UserController_create"
      summary: "Create User"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        201:
          description: "User created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Required fields missing"
      tags:
        - "Users"
      security:
        - bearer: []
    get:
      operationId: "UserController_findAll"
      summary: "Get all users"
      parameters: []
      responses:
        200:
          description: "All Users"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
      tags:
        - "Users"
      security:
        - bearer: []
  /user/{id}:
    get:
      operationId: "UserController_findOne"
      summary: "Get user by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "User not exist"
      tags:
        - "Users"
      security:
        - bearer: []
    put:
      operationId: "UserController_update"
      summary: "Update user by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordDto"
      responses:
        200:
          description: "User updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Invalid id (not uuid)"
        403:
          description: "Password is invalid"
        404:
          description: "User not exist"
      tags:
        - "Users"
      security:
        - bearer: []
    delete:
      operationId: "UserController_delete"
      summary: "Delete user by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: "User deleted"
        400:
          description: "UUID not valid"
        404:
          description: "User not exist"
      tags:
        - "Users"
      security:
        - bearer: []
  /auth/signup:
    post:
      operationId: "AuthController_signup"
      summary: "Create User"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthUserDto"
      responses:
        201:
          description: "User created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Required fields missing"
      tags:
        - "Authorization"
  /auth/login:
    post:
      operationId: "AuthController_login"
      summary: "Login"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthUserDto"
      responses:
        200:
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        400:
          description: "Required fields missing"
        403:
          description: "Authentication failed"
      tags:
        - "Authorization"
  /artist:
    post:
      operationId: "ArtistController_create"
      summary: "Create Artist"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        201:
          description: "Artist create"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        400:
          description: "Required fields missing"
      tags:
        - "Artists"
      security:
        - bearer: []
    get:
      operationId: "ArtistController_findAll"
      summary: "Get all Artists"
      parameters: []
      responses:
        200:
          description: "All Artists"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Artist"
      tags:
        - "Artists"
      security:
        - bearer: []
  /artist/{id}:
    get:
      operationId: "ArtistController_findOne"
      summary: "Get Artist by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Artist not exist"
      tags:
        - "Artists"
      security:
        - bearer: []
    put:
      operationId: "ArtistController_update"
      summary: "Update Artist by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateArtistDto"
      responses:
        200:
          description: "Artist updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Artist not exist"
      tags:
        - "Artists"
      security:
        - bearer: []
    delete:
      operationId: "ArtistController_delete"
      summary: "Delete Artist by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: "Artist deleted"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Artist not exist"
      tags:
        - "Artists"
      security:
        - bearer: []
  /album:
    post:
      operationId: "AlbumController_create"
      summary: "Create Album"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        201:
          description: "Album create"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: "Required fields missing"
      tags:
        - "Albums"
      security:
        - bearer: []
    get:
      operationId: "AlbumController_findAll"
      summary: "Get all Albums"
      parameters: []
      responses:
        200:
          description: "All Albums"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Album"
      tags:
        - "Albums"
      security:
        - bearer: []
  /album/{id}:
    get:
      operationId: "AlbumController_findOne"
      summary: "Get Album by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Album not exist"
      tags:
        - "Albums"
      security:
        - bearer: []
    put:
      operationId: "AlbumController_update"
      summary: "Update Album by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDto"
      responses:
        200:
          description: "Album updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Album not exist"
      tags:
        - "Albums"
      security:
        - bearer: []
    delete:
      operationId: "AlbumController_delete"
      summary: "Delete Album by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: "Album deleted"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Album not exist"
      tags:
        - "Albums"
      security:
        - bearer: []
  /track:
    post:
      operationId: "TrackController_create"
      summary: "Create Track"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        201:
          description: "Track create"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        400:
          description: "Required fields missing"
      tags:
        - "Tracks"
      security:
        - bearer: []
    get:
      operationId: "TrackController_findAll"
      summary: "Get all Tracks"
      parameters: []
      responses:
        200:
          description: "All Tracks"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Track"
      tags:
        - "Tracks"
      security:
        - bearer: []
  /track/{id}:
    get:
      operationId: "TrackController_findOne"
      summary: "Get Track by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "The found record"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Track not exist"
      tags:
        - "Tracks"
      security:
        - bearer: []
    put:
      operationId: "TrackController_update"
      summary: "Update Track by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrackDto"
      responses:
        200:
          description: "Track updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Track not exist"
      tags:
        - "Tracks"
      security:
        - bearer: []
    delete:
      operationId: "TrackController_delete"
      summary: "Delete Track by ID"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: "Track deleted"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Track not exist"
      tags:
        - "Tracks"
      security:
        - bearer: []
  /favs:
    get:
      operationId: "FavoritesController_findAll"
      summary: "Get all Favorites"
      parameters: []
      responses:
        200:
          description: "All Favorites"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/FavoritesResponse"
      tags:
        - "Favorites"
      security:
        - bearer: []
  /favs/{type}/{id}:
    post:
      operationId: "FavoritesController_handleAddFav"
      summary: "Add item (track/album/artist) to the favorites"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "type"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        201:
          description: "Added to favorites"
        400:
          description: "Invalid id (not uuid)"
        422:
          description: "Item not existed"
      tags:
        - "Favorites"
      security:
        - bearer: []
    delete:
      operationId: "FavoritesController_delFav"
      summary: "Delete item (track/album/artist) from favorites"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "type"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: "Deleted from favorites"
        400:
          description: "Invalid id (not uuid)"
        404:
          description: "Item not in favorites"
      tags:
        - "Favorites"
      security:
        - bearer: []
info:
  title: "Home Library Service"
  description: "Home music library service"
  version: "1.0.0"
  contact: {}
tags: []
servers:
  - url: "http://localhost:4000"
components:
  securitySchemes:
    bearer:
      scheme: "bearer"
      bearerFormat: "JWT"
      type: "http"
  schemas:
    CreateUserDto:
      type: "object"
      properties:
        login:
          type: "string"
        password:
          type: "string"
      required:
        - "login"
        - "password"
    User:
      type: "object"
      properties:
        id:
          type: "string"
          example: "ffcbc50b-80d8-43d0-aed4-4de49f883775"
          description: "User id: uuid v4"
        login:
          type: "string"
          example: "user@gmail.com"
          description: "User login"
        version:
          type: "number"
          example: "1"
          description: "Integer number, increments on update"
        createdAt:
          type: "number"
          example: "1676130969000"
          description: "timestamp of creation"
        updatedAt:
          type: "number"
          example: "1676130969000"
          description: "timestamp of last update"
        password:
          type: "string"
      required:
        - "id"
        - "login"
        - "version"
        - "createdAt"
        - "updatedAt"
        - "password"
    UpdatePasswordDto:
      type: "object"
      properties:
        oldPassword:
          type: "string"
        newPassword:
          type: "string"
      required:
        - "oldPassword"
        - "newPassword"
    AuthUserDto:
      type: "object"
      properties:
        login:
          type: "string"
        password:
          type: "string"
      required:
        - "login"
        - "password"
    AuthResponse:
      type: "object"
      properties:
        accessToken:
          type: "string"
      required:
        - "accessToken"
    CreateArtistDto:
      type: "object"
      properties:
        name:
          type: "string"
        grammy:
          type: "boolean"
      required:
        - "name"
        - "grammy"
    Track:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        artistId:
          type: "string"
          nullable: true
        albumId:
          type: "string"
          nullable: true
        duration:
          type: "number"
        artist:
          $ref: "#/components/schemas/Artist"
        album:
          $ref: "#/components/schemas/Album"
      required:
        - "id"
        - "name"
        - "artistId"
        - "albumId"
        - "duration"
        - "artist"
        - "album"
    Artist:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        grammy:
          type: "boolean"
        albums:
          type: "array"
          items:
            $ref: "#/components/schemas/Album"
        tracks:
          type: "array"
          items:
            $ref: "#/components/schemas/Track"
      required:
        - "id"
        - "name"
        - "grammy"
        - "albums"
        - "tracks"
    Album:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        year:
          type: "number"
        artistId:
          type: "string"
          nullable: true
        artist:
          $ref: "#/components/schemas/Artist"
        tracks:
          type: "array"
          items:
            $ref: "#/components/schemas/Track"
      required:
        - "id"
        - "name"
        - "year"
        - "artistId"
        - "artist"
        - "tracks"
    UpdateArtistDto:
      type: "object"
      properties:
        name:
          type: "string"
        grammy:
          type: "boolean"
      required:
        - "name"
        - "grammy"
    CreateAlbumDto:
      type: "object"
      properties:
        name:
          type: "string"
        year:
          type: "number"
        artistId:
          type: "string"
      required:
        - "name"
        - "year"
        - "artistId"
    UpdateAlbumDto:
      type: "object"
      properties:
        name:
          type: "string"
        year:
          type: "number"
        artistId:
          type: "string"
          nullable: true
      required:
        - "name"
        - "year"
        - "artistId"
    CreateTrackDto:
      type: "object"
      properties:
        name:
          type: "string"
        artistId:
          type: "string"
          nullable: true
        albumId:
          type: "string"
          nullable: true
        duration:
          type: "number"
      required:
        - "name"
        - "artistId"
        - "albumId"
        - "duration"
    UpdateTrackDto:
      type: "object"
      properties:
        name:
          type: "string"
        artistId:
          type: "string"
          nullable: true
        albumId:
          type: "string"
          nullable: true
        duration:
          type: "number"
    FavoritesResponse:
      type: "object"
      properties:
        artists:
          type: "array"
          items:
            $ref: "#/components/schemas/Artist"
        albums:
          type: "array"
          items:
            $ref: "#/components/schemas/Album"
        tracks:
          type: "array"
          items:
            $ref: "#/components/schemas/Track"
      required:
        - "artists"
        - "albums"
        - "tracks"
